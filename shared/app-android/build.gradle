import com.github.triplet.gradle.androidpublisher.ReleaseStatus

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.triplet.playPublisher)
}

Properties projectNameProperties = new Properties()
projectNameProperties.load(new FileInputStream(file("project_name.properties")))
def projectName = projectNameProperties["project.name"]
println "> App project name: " + projectName

File pkgConfigFile = file("${project.rootDir}/app-android/config/pkg")
def projectPkg = ""
if (pkgConfigFile.exists()) {
    projectPkg = pkgConfigFile.text.trim()
    println "> App pkg: " + projectPkg
}

def isMainApp = projectPkg == "org.mtransit.android"
println "> Main app? " + isMainApp

def envCI = System.getenv("CI")
def isCI = envCI != null && envCI != ""
println "> CI: " + isCI

def isDevLeakCanaryOff = false
Properties devProperties = new Properties()
def devPropertiesFile = file("dev.properties")
if (!devPropertiesFile.exists()) {
    devPropertiesFile = file("../dev.properties")
}
if (devPropertiesFile.exists()) {
    devProperties.load(new FileInputStream(devPropertiesFile))
    isDevLeakCanaryOff = devProperties["dev.leakCanaryOff"] == "true"
}
println "> DEV: Leak Canary OFF: " + isDevLeakCanaryOff

if (isMainApp) {
    apply plugin: libs.plugins.google.ksp.get().pluginId
    apply plugin: libs.plugins.hilt.get().pluginId
    apply plugin: libs.plugins.gms.get().pluginId
    apply plugin: libs.plugins.firebase.crashlytics.get().pluginId
    apply plugin: libs.plugins.firebase.perf.get().pluginId
    // apply plugin: libs.plugins.sonar.get().pluginId
}

android {
    compileSdk = libs.versions.sdk.compile.get().toInteger()
    buildToolsVersion = libs.versions.buildTools.get()

    compileOptions {
        sourceCompatibility rootProject.javaVersion
        targetCompatibility rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = rootProject.javaVersion
        allWarningsAsErrors = true
    }

    if (!projectPkg.empty) {
        namespace = projectPkg
    }

    // Shared version name also used in https://github.com/mtransitapps/commons/blob/master/shared/publish_app_release.sh
    def now = new Date()
    def year = now.format('yyyy').toInteger() - 2000
    def month = now.format('MM')
    def dayOfMonth = now.format('dd')
    def sharedVersionName = "" + year + "." + month + "." + dayOfMonth
    println "> Shared version name: " + sharedVersionName

    // App version code also used in https://github.com/mtransitapps/commons/blob/master/shared/publish_app_release.sh
    def commitCountS = providers.exec {
        commandLine("git", "-C", "${project.rootDir}", "rev-list", "HEAD", "--count")
    }.standardOutput.asText.get().trim()
    def appVersionCode = 1
    if (!commitCountS.empty) {
        def commitCount = commitCountS.toInteger()
        appVersionCode = 1000 + commitCount
    }
    println "> App version code: " + appVersionCode

    def gitHash = providers.exec {
        commandLine("git", "-C", "${project.rootDir}", "rev-parse", "--short", "HEAD")
    }.standardOutput.asText.get().trim()
    println "> App version hash: " + gitHash

    Properties debugSigningKeysProperties = new Properties()
    def debugSigningKeysPropertiesFile = file("app-signing-debug-keys.properties")
    if (debugSigningKeysPropertiesFile.exists()) {
        debugSigningKeysProperties.load(new FileInputStream(debugSigningKeysPropertiesFile))
    } else {
        debugSigningKeysPropertiesFile = file("${project.rootDir}/app-signing-debug-keys.properties")
        if (debugSigningKeysPropertiesFile.exists()) {
            debugSigningKeysProperties.load(new FileInputStream(debugSigningKeysPropertiesFile))
        }
    }

    def useGooglePlayUploadKeysProperties = true
    if (project.hasProperty("useGooglePlayUploadKeysProperties")) {
        useGooglePlayUploadKeysProperties = project.getProperty("useGooglePlayUploadKeysProperties").toBoolean()
    }
    println "> Using Google Play Upload keys: " + useGooglePlayUploadKeysProperties

    Properties appSigningKeysProperties = new Properties()
    def appSigningKeysPropertiesFile = file("app-signing-release-keys.properties")
    if (appSigningKeysPropertiesFile.exists()) {
        appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
    } else {
        appSigningKeysPropertiesFile = file("${project.rootDir}/app-signing-release-keys.properties")
        if (appSigningKeysPropertiesFile.exists()) {
            appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
        }
    }

    Properties googlePlayUploadKeysProperties = new Properties()
    def googlePlayUploadKeysPropertiesFile = file("google-play-upload-keys.properties")
    if (googlePlayUploadKeysPropertiesFile.exists()) {
        googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
    } else {
        googlePlayUploadKeysPropertiesFile = file("${project.rootDir}/google-play-upload-keys.properties")
        if (googlePlayUploadKeysPropertiesFile.exists()) {
            googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
        }
    }

    def resValueFr = file("src/main/res/values-fr")
    println "> Including French language: " + resValueFr.exists()

    defaultConfig {
        if (!projectPkg.empty) {
            applicationId = projectPkg
        }
        versionCode appVersionCode
        // App version name also used in https://github.com/mtransitapps/commons/blob/master/shared/publish_app_release.sh
        def appVersionName = sharedVersionName + "r" + appVersionCode
        versionName appVersionName
        buildConfigField "String", "GIT_HASH", "\"$gitHash\""
        if (useGooglePlayUploadKeysProperties) {
            base.archivesName = "${projectName}_v${sharedVersionName}_r${appVersionCode}_upload"
        } else {
            base.archivesName = "${projectName}_v${sharedVersionName}_r${appVersionCode}"
        }
        resourceConfigurations += ["en"]
        if (resValueFr.exists()) {
            resourceConfigurations += ["fr"]
        }
        // resourceConfigurations "en", "xxxhdpi" // DEBUG xxxhdpi = Pixel 2 XL
        // resourceConfigurations "fr", "xxhdpi" // DEBUG xxhdpi = Nexus 5
        minSdk = libs.versions.sdk.min.get().toInteger()
        buildConfigField "int", "MIN_SDK_VERSION", "$minSdkVersion.apiLevel"
        targetSdk = libs.versions.sdk.target.get().toInteger()

        manifestPlaceholders.target_sdk_version = libs.versions.sdk.target.get()
        manifestPlaceholders.pkg_namespace = namespace

        manifestPlaceholders.permission_provider_read = "org.mtransit.android.provider.permission.READ_PROVIDER"
        manifestPlaceholders.permission_receiver_broadcast = "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER"
        setupResValues(it, projectPkg)
    }

    signingConfigs {
        debug {
            if (debugSigningKeysPropertiesFile.exists()) {
                storeFile file(debugSigningKeysProperties["key.store"])
                storePassword debugSigningKeysProperties["key.store.password"]
                keyAlias debugSigningKeysProperties["key.alias"]
                keyPassword debugSigningKeysProperties["key.alias.password"]
            }
        }
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    storeFile file(googlePlayUploadKeysProperties["key.store"])
                    storePassword googlePlayUploadKeysProperties["key.store.password"]
                    keyAlias googlePlayUploadKeysProperties["key.alias"]
                    keyPassword googlePlayUploadKeysProperties["key.alias.password"]
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    storeFile file(appSigningKeysProperties["key.store"])
                    storePassword appSigningKeysProperties["key.store.password"]
                    keyAlias appSigningKeysProperties["key.alias"]
                    keyPassword appSigningKeysProperties["key.alias.password"]
                }
            }
        }
    }

    buildFeatures {
        aidl = false
        buildConfig = true
        compose = false
        dataBinding = false
        renderScript = false
        resValues = true
        shaders = false
        //noinspection GroovyTrivialIf
        if (isMainApp) {
            viewBinding = true
        } else {
            viewBinding = false
        }
    }

    buildTypes {
        debug {
            versionNameSuffix = "_DEBUG"
            applicationIdSuffix = ".debug"

            manifestPlaceholders.permission_provider_read = "org.mtransit.android.debug.provider.permission.READ_PROVIDER"
            manifestPlaceholders.permission_receiver_broadcast = "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER"
            setupResValues(it, projectPkg + applicationIdSuffix)

            // testCoverageEnabled false // DEBUG skip coverage report
            shrinkResources = false
            if (isMainApp) {
                minifyEnabled = false
                proguardFiles getDefaultProguardFile("proguard-android.txt"),
                        "proguard-rules.pro"
                multiDexEnabled = true
                firebaseCrashlytics {
                    // https://firebase.google.com/docs/crashlytics/get-deobfuscated-reports?platform=android#keep_obfuscated_build_variants
                    mappingFileUploadEnabled = false
                }
                FirebasePerformance {
                    // https://firebase.google.com/docs/perf-mon/disable-sdk?platform=android#disable-gradle-plugin
                    instrumentationEnabled false
                }
            } else {
                minifyEnabled = false
            }
            aaptOptions.cruncherEnabled = false
        }
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            }

            if (isMainApp) {
                shrinkResources = true
                minifyEnabled = true
                // https://android.googlesource.com/platform/sdk/+/master/files/proguard-android-optimize.txt
                proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), // "proguard-android.txt"),
                        "proguard-rules.pro"
            } else {
                shrinkResources = false
                minifyEnabled = false
            }
        }
    }

    // https://developer.android.com/studio/write/lint
    // https://developer.android.com/reference/tools/gradle-api/8.0/com/android/build/api/dsl/Lint
    lint {
        if (isMainApp) {
            abortOnError = true // do fail CI on main app
            warningsAsErrors = true
            informational "DoNotMockPlatformTypes", // Platform types should not be mocked #SlackLint
                    "DenyListedApi", // Deny-listed API #SlackLint
                    "DeprecatedCall", // This class or method is deprecated; consider using an alternative. #SlackLint
                    "KotlinPairNotCreated" // Use Kotlin's kotlin.Pair instead of other Pair types from other libraries #SlackLint
            disable "InjectInJava", // Only Kotlin classes should be injected in order for Anvil to work. #SlackLint
                    "DeprecatedSqlUsage", // Use SqlDelight! #SlackLint
                    "RawDispatchersUse", // Use SlackDispatchers. #SlackLint
                    "ArgInFormattedQuantityStringRes", // Count value in formatted string resource. #SlackLint
                    "FragmentFieldInjection" // Fragment dependencies should be injected using the Fragment's constructor. #SlackLint
            // https://developer.android.com/studio/write/lint#snapshot
            baseline file("lint-baseline.xml")
        } else {
            abortOnError = false // do not fail CI on module apps
        }
        checkDependencies = true // also check leaf modules
        // checkAllWarnings true // too slow for CI, can be enabled locally
    }

    sourceSets {
        main {
            if (isMainApp) {
                // NOTHING
            } else {
                res.srcDirs += "src/main/res-current"
                res.srcDirs += "src/main/res-next"
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            tasks.withType(Test).configureEach {
                jvmArgs "-noverify"
                testLogging {
                    events("passed", "skipped", "failed")
                }
            }
        }
    }
}

if (isMainApp) {
    hilt {
        enableAggregatingTask = true
    }
}

dependencies {
    if (isMainApp) {
        implementation(project(":commons-android")) {
            exclude group: 'com.google.protobuf', module: 'protoc'
            exclude group: 'com.google.protobuf', module: 'protobuf-java'
            exclude group: 'com.google.protobuf', module: 'protobuf-javalite'
        }
        implementation(platform(libs.kotlin.bom))
        implementation(platform(libs.kotlinx.coroutines.bom))
        implementation(libs.bundles.kotlin)
        implementation(libs.bundles.kotlin.android)
        implementation(libs.bundles.dagger)
        ksp(libs.hilt.compiler)
        implementation(libs.bundles.androidx)
        implementation(libs.material)
        ksp(libs.androidx.room.compiler)
        implementation(libs.bundles.img)
        ksp(libs.glide.ksp)
        implementation(platform(libs.firebase.bom))
        implementation(libs.bundles.gps)
        implementation(libs.bundles.billingClient)
        implementation(libs.play.review)
        implementation(libs.bundles.fb)
        implementation(libs.bundles.appLovin)
        implementation(libs.bundles.retrofit)
        implementation(platform(libs.okhttp.bom))
        implementation(libs.bundles.okHttp)
        implementation(libs.bundles.gson)
        debugImplementation(libs.chucker)
        releaseImplementation(libs.chucker.noop)

        if (!isDevLeakCanaryOff) {
            debugImplementation(libs.leakcanary)
        }

        lintChecks(libs.slackLint)

        testImplementation(libs.bundles.test.unit)
    } else {
        implementation(project(":commons-android"))
        implementation(platform(libs.kotlin.bom))
        implementation(platform(libs.kotlinx.coroutines.bom))
        implementation(libs.bundles.kotlin)
        implementation(libs.bundles.kotlin.android)
        implementation(libs.androidx.core)
    }
}

if (isMainApp) {
    ksp {
        arg("room.schemaLocation", "$projectDir/schemas")
        arg("room.incremental", "true")
    }
}

play {
    serviceAccountCredentials.set(file("google-play-auto-publisher.json"))
    defaultToAppBundles.set(true)
    // Available tracks: internal, alpha, Beta (Private), beta, production
    // "Beta (Private)" is default because it's hard to use with -Pparam parameter
    track.set("Beta (Private)")
    fromTrack.set("Beta (Private)")
    promoteTrack.set("Beta (Private)")
    releaseStatus.set(ReleaseStatus.DRAFT) // ReleaseStatus.[COMPLETED/DRAFT/HALTED/IN_PROGRESS]
    userFraction.set(0.01d) // 0.00 - 0.10 - 0.33 - 0.50 - 1.00 WHEN releaseStatus=[inProgress/halted]
    updatePriority.set(4) // 0-5, 0=default, 5=highest priority
}

def setupResValues(buildType, appId) {
    println "> Resource values set for: " + appId

    if (buildType.name == "debug") {
        // does NOT work because we can't overwrite a resource defined in XML
        // -> it would require:
        // - moving RELEASE app name to a config file (& remove from XML file)
        // - setting DEBUG & RELEASE @string/app_name from Gradle build file
        def appName = "MT " + appId
                .replaceAll("org.mtransit.android.", "")
                .replaceAll(".debug", "")
                .replaceAll("_", " ")
                .toUpperCase()
        println "> App name: " + appName
        buildType.resValue("string", "app_name", appName)
    }

    buildType.resValue("string", "bike_station_authority", "${appId}.bike")
    buildType.resValue("string", "gtfs_rts_authority", "${appId}.gtfs")
    buildType.resValue("string", "gtfs_real_time_authority", "${appId}.gtfs.realtime")

    buildType.resValue("string", "rss_authority", "${appId}.news.rss")
    buildType.resValue("string", "twitter_authority", "${appId}.news.twitter")
    buildType.resValue("string", "youtube_authority", "${appId}.news.youtube")
    buildType.resValue("string", "instagram_authority", "${appId}.news.instagram")

    buildType.resValue("string", "clever_devices_authority", "${appId}.clever_devices")
    buildType.resValue("string", "next_bus_authority", "${appId}.nextbus")
    buildType.resValue("string", "one_bus_away_authority", "${appId}.oba")
    buildType.resValue("string", "strategic_mapping_authority", "${appId}.strategic_mapping")

    buildType.resValue("string", "ca_edmonton_authority", "${appId}.etslive")
    buildType.resValue("string", "ca_ltconline_authority", "${appId}.ltconline")
    buildType.resValue("string", "ca_sto_authority", "${appId}.ca_sto")
    buildType.resValue("string", "ca_translink_authority", "${appId}.ca_translink")
    buildType.resValue("string", "grand_river_transit_authority", "${appId}.ca_grt")
    buildType.resValue("string", "greater_sudbury_authority", "${appId}.mybus")
    buildType.resValue("string", "oc_transpo_authority", "${appId}.octranspo")
    buildType.resValue("string", "regina_transit_authority", "${appId}.transitlive_com")
    buildType.resValue("string", "rtc_quebec_authority", "${appId}.rtcquebec")
    buildType.resValue("string", "stm_info_authority", "${appId}.stminfo")
    buildType.resValue("string", "stm_info_api_authority", "${appId}.stminfoapi")
    buildType.resValue("string", "winnipeg_transit_authority", "${appId}.winnipeg_transit")
}
