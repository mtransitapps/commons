apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.triplet.play'

Properties projectNameProperties = new Properties()
projectNameProperties.load(new FileInputStream(file("project_name.properties")))

def projectName = projectNameProperties["project.name"]
println "> App project name: " + projectName

def envCI = System.getenv("CI")
def isCI = envCI != null && envCI != ""
println "> CI: " + isCI

def isDevLeakCanaryOff = false
Properties devProperties = new Properties()
def devPropertiesFile = file("dev.properties")
if (!devPropertiesFile.exists()) {
    devPropertiesFile = file("../dev.properties")
}
if (devPropertiesFile.exists()) {
    devProperties.load(new FileInputStream(devPropertiesFile))
    isDevLeakCanaryOff = devProperties['dev.leakCanaryOff']
}
println "> DEV: Leak Canary OFF: " + isDevLeakCanaryOff

if (projectName == "MT") {
    apply plugin: 'com.google.firebase.crashlytics'
    apply plugin: "org.sonarqube"
}

repositories {
    mavenCentral()
}

dependencies {
    if (projectName == "MT") {
        implementation(project(':commons-android')) {
            exclude group: 'com.google.protobuf', module: 'protobuf-java'
            exclude group: 'com.google.protobuf', module: 'protobuf-javalite'
        }
        implementation rootProject.ext.kotlinLibs.values()
        implementation rootProject.ext.kotlinAndroidLibs.values()
        implementation rootProject.ext.supportLibs.values()
        // implementation rootProject.ext.gpsLibs.mediation_test_suite // DEBUG
        implementation rootProject.ext.gpsLibs.values()
        implementation rootProject.ext.billingClientLibs.values()
        implementation rootProject.ext.fbLibs.values()
        implementation rootProject.ext.moPubLibs.values()
        implementation(rootProject.ext.moPubLibsAar.moPubAdsBanner) {
            transitive = true
        }
        implementation(rootProject.ext.moPubLibsAar.moPubAdsRewarded) {
            transitive = true
        }

        if (!isDevLeakCanaryOff) {
            debugImplementation rootProject.ext.leakCanaryLibs.leakcanary
        }

        testImplementation rootProject.ext.jUnitLibs.jUnit
        testImplementation rootProject.ext.mockitoLibs.mockitoCore
    } else {
        implementation project(':commons-android')
        implementation rootProject.ext.kotlinLibs.values()
        implementation rootProject.ext.kotlinAndroidLibs.values()
        implementation rootProject.ext.supportLibs.core
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility rootProject.javaVersion
        targetCompatibility rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = rootProject.ext.kotlinOptionsJvmTarget
    }

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(file("../commons-android/version.properties")))
    def theVersionName = versionProperties['version.name']
    println "> App version name: " + theVersionName

    def commitCountS = "git -C ../ rev-list HEAD --count".execute().text.trim()
    def theVersionCode = 1
    if (!commitCountS.empty) {
        def commitCount = commitCountS.toInteger()
        theVersionCode = 1000 + commitCount
    }
    println "> App version code: " + theVersionCode

    def useGooglePlayUploadKeysProperties = true
    if (project.hasProperty("useGooglePlayUploadKeysProperties")) {
        useGooglePlayUploadKeysProperties = project.getProperty("useGooglePlayUploadKeysProperties").toBoolean()
    }
    println "> Using Google Play Upload keys: " + useGooglePlayUploadKeysProperties

    Properties appSigningKeysProperties = new Properties()
    def appSigningKeysPropertiesFile = file("app-signing-release-keys.properties")
    if (appSigningKeysPropertiesFile.exists()) {
        appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
    } else {
        appSigningKeysPropertiesFile = file("../app-signing-release-keys.properties")
        if (appSigningKeysPropertiesFile.exists()) {
            appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
        }
    }

    Properties googlePlayUploadKeysProperties = new Properties()
    def googlePlayUploadKeysPropertiesFile = file("google-play-upload-keys.properties")
    if (googlePlayUploadKeysPropertiesFile.exists()) {
        googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
    } else {
        googlePlayUploadKeysPropertiesFile = file("../google-play-upload-keys.properties")
        if (googlePlayUploadKeysPropertiesFile.exists()) {
            googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
        }
    }

    def resValueFr = file("src/main/res/values-fr")
    println "> Including French language: " + resValueFr.exists()

    defaultConfig {
        versionCode theVersionCode
        versionName theVersionName + "r" + theVersionCode
        if (useGooglePlayUploadKeysProperties) {
            setProperty("archivesBaseName", "${projectName}_v${theVersionName}_r${theVersionCode}_upload")
        } else {
            setProperty("archivesBaseName", "${projectName}_v${theVersionName}_r${theVersionCode}")
        }
        if (resValueFr.exists()) {
            resConfigs "en", "fr"
        } else {
            resConfigs "en"
        }
        // resConfigs "en", "xxxhdpi" // DEBUG xxxhdpi = Pixel 2 XL
        // resConfigs "fr", "xxhdpi" // DEBUG xxhdpi = Nexus 5
        minSdkVersion rootProject.ext.minSdkVersion
        buildConfigField "int", "MIN_SDK_VERSION", "$minSdkVersion.apiLevel"
        targetSdkVersion rootProject.ext.targetSdkVersion

        manifestPlaceholders = [
                permission_provider_read     : "org.mtransit.android.provider.permission.READ_PROVIDER",
                permission_receiver_broadcast: "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER"
        ]
    }

    signingConfigs {
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    storeFile file(googlePlayUploadKeysProperties['key.store'])
                    storePassword googlePlayUploadKeysProperties['key.store.password']
                    keyAlias googlePlayUploadKeysProperties['key.alias']
                    keyPassword googlePlayUploadKeysProperties['key.alias.password']
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    storeFile file(appSigningKeysProperties['key.store'])
                    storePassword appSigningKeysProperties['key.store.password']
                    keyAlias appSigningKeysProperties['key.alias']
                    keyPassword appSigningKeysProperties['key.alias.password']
                }
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "_DEBUG"
            applicationIdSuffix ".debug"
            manifestPlaceholders = [
                    permission_provider_read     : "org.mtransit.android.debug.provider.permission.READ_PROVIDER",
                    permission_receiver_broadcast: "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER"
            ]

            // testCoverageEnabled false // DEBUG skip coverage report
            shrinkResources false
            if (projectName == "MT") {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'),
                        'proguard-rules.pro'
                multiDexEnabled true
                firebaseCrashlytics {
                    // https://firebase.google.com/docs/crashlytics/get-deobfuscated-reports?platform=android#keep_obfuscated_build_variants
                    mappingFileUploadEnabled false
                }
            } else {
                minifyEnabled false
            }
            aaptOptions.cruncherEnabled = false
        }
        //noinspection GroovyMissingReturnStatement
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            }

            if (projectName == "MT") {
                shrinkResources true
                minifyEnabled true
                // https://android.googlesource.com/platform/sdk/+/master/files/proguard-android-optimize.txt
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), // 'proguard-android.txt'),
                        'proguard-rules.pro'
            } else {
                shrinkResources false
                minifyEnabled false
            }
        }
    }

    dexOptions {
        if (isCI) {
            preDexLibraries false
            javaMaxHeapSize "1g"
            threadCount 1 // reduce predex thread count to limit memory usage
        } else {
            preDexLibraries true
            javaMaxHeapSize "2g"
            threadCount 2
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        if (projectName == "MT") {
            abortOnError true
            warningsAsErrors false
            ignoreWarnings false
            quiet false
        } else {
            abortOnError false
        }
        checkDependencies true // also check leaf modules
        // checkAllWarnings true // too slow for CI, can be enabled locally
        ignoreTestSources true
        if (projectName == "MT") {
            warning 'InvalidPackage', //
                    'ClickableViewAccessibility', //
                    'MergeRootFrame', //
                    'Overdraw', //
                    'UselessParent', //
                    'IconDensities',  //
                    'RtlHardcoded'
        }
    }

    sourceSets {
        main {
            if (projectName == "MT") {
                // NOTHING
            } else {
                res.srcDirs += 'src/main/res-current'
                res.srcDirs += 'src/main/res-next'
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }
}

play {
    serviceAccountCredentials.set(file("google-play-auto-publisher.json"))
    defaultToAppBundles.set(true)
    // Available tracks: internal, alpha, Beta (Private), beta, production
    // "Beta (Private)" is default because it's hard to use with -Pparam parameter
    track.set("Beta (Private)")
    fromTrack.set("Beta (Private)")
    promoteTrack.set("Beta (Private)")
    releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT) // ReleaseStatus.[COMPLETED/DRAFT/HALTED/IN_PROGRESS]
    userFraction.set(0.01d) // 0.00 - 0.10 - 0.33 - 0.50 - 1.00 WHEN releaseStatus=[inProgress/halted]
    updatePriority.set(4) // 0-5, 0=default, 5=highest priority
}

if (projectName == "MT") {
    apply plugin: 'com.google.gms.google-services'
}
