plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.triplet.playPublisher
}

Properties projectNameProperties = new Properties()
projectNameProperties.load(new FileInputStream(file("project_name.properties")))
def projectName = projectNameProperties["project.name"]
println "> App project name: " + projectName

File pkgConfigFile = file("${project.rootDir}/app-android/config/pkg")
def projectPkg = ""
if (pkgConfigFile.exists()) {
    projectPkg = pkgConfigFile.text.trim()
    println "> App pkg: " + projectPkg
}

def isMainApp = projectPkg == "org.mtransit.android"
println "> Main app? " + isMainApp

def envCI = System.getenv("CI")
def isCI = envCI != null && envCI != ""
println "> CI: " + isCI

def isDevLeakCanaryOff = false
Properties devProperties = new Properties()
def devPropertiesFile = file("dev.properties")
if (!devPropertiesFile.exists()) {
    devPropertiesFile = file("../dev.properties")
}
if (devPropertiesFile.exists()) {
    devProperties.load(new FileInputStream(devPropertiesFile))
    isDevLeakCanaryOff = devProperties['dev.leakCanaryOff'] == "true"
}
println "> DEV: Leak Canary OFF: " + isDevLeakCanaryOff

if (isMainApp) {
    apply plugin: libs.plugins.hilt.get().pluginId
    apply plugin: libs.plugins.gms.get().pluginId
    apply plugin: libs.plugins.firebase.crashlytics.get().pluginId
    // apply plugin: libs.plugins.sonar.get().pluginId
}

android {
    compileSdkVersion libs.versions.compileSdkVersion.get().toInteger()
    buildToolsVersion libs.versions.buildToolsVersion.get()

    compileOptions {
        sourceCompatibility rootProject.javaVersion
        targetCompatibility rootProject.javaVersion
    }
    kotlinOptions {
        jvmTarget = libs.versions.kotlinOptionsJvmTarget.get()
        allWarningsAsErrors = true
    }

    if (!projectPkg.empty) {
        namespace = projectPkg
    }

    Properties versionProperties = new Properties()
    versionProperties.load(new FileInputStream(file("${project.rootDir}/commons-android/version.properties")))
    def theVersionName = versionProperties['version.name']
    println "> App version name: " + theVersionName

    def commitCountS = "git -C ${project.rootDir} rev-list HEAD --count".execute().text.trim()
    def theVersionCode = 1
    if (!commitCountS.empty) {
        def commitCount = commitCountS.toInteger()
        theVersionCode = 1000 + commitCount
    }
    println "> App version code: " + theVersionCode

    def gitHash = "git -C ${project.rootDir} rev-parse --short HEAD".execute().text.trim()
    println "> App version hash: " + gitHash

    Properties debugSigningKeysProperties = new Properties()
    def debugSigningKeysPropertiesFile = file("app-signing-debug-keys.properties")
    if (debugSigningKeysPropertiesFile.exists()) {
        debugSigningKeysProperties.load(new FileInputStream(debugSigningKeysPropertiesFile))
    } else {
        debugSigningKeysPropertiesFile = file("${project.rootDir}/app-signing-debug-keys.properties")
        if (debugSigningKeysPropertiesFile.exists()) {
            debugSigningKeysProperties.load(new FileInputStream(debugSigningKeysPropertiesFile))
        }
    }

    def useGooglePlayUploadKeysProperties = true
    if (project.hasProperty("useGooglePlayUploadKeysProperties")) {
        useGooglePlayUploadKeysProperties = project.getProperty("useGooglePlayUploadKeysProperties").toBoolean()
    }
    println "> Using Google Play Upload keys: " + useGooglePlayUploadKeysProperties

    Properties appSigningKeysProperties = new Properties()
    def appSigningKeysPropertiesFile = file("app-signing-release-keys.properties")
    if (appSigningKeysPropertiesFile.exists()) {
        appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
    } else {
        appSigningKeysPropertiesFile = file("${project.rootDir}/app-signing-release-keys.properties")
        if (appSigningKeysPropertiesFile.exists()) {
            appSigningKeysProperties.load(new FileInputStream(appSigningKeysPropertiesFile))
        }
    }

    Properties googlePlayUploadKeysProperties = new Properties()
    def googlePlayUploadKeysPropertiesFile = file("google-play-upload-keys.properties")
    if (googlePlayUploadKeysPropertiesFile.exists()) {
        googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
    } else {
        googlePlayUploadKeysPropertiesFile = file("${project.rootDir}/google-play-upload-keys.properties")
        if (googlePlayUploadKeysPropertiesFile.exists()) {
            googlePlayUploadKeysProperties.load(new FileInputStream(googlePlayUploadKeysPropertiesFile))
        }
    }

    def resValueFr = file("src/main/res/values-fr")
    println "> Including French language: " + resValueFr.exists()

    defaultConfig {
        if (!projectPkg.empty) {
            applicationId = projectPkg
        }
        versionCode theVersionCode
        versionName theVersionName + "r" + theVersionCode
        buildConfigField "String", "GIT_HASH", "\"$gitHash\""
        if (useGooglePlayUploadKeysProperties) {
            setProperty("archivesBaseName", "${projectName}_v${theVersionName}_r${theVersionCode}_upload")
        } else {
            setProperty("archivesBaseName", "${projectName}_v${theVersionName}_r${theVersionCode}")
        }
        if (resValueFr.exists()) {
            resConfigs "en", "fr"
        } else {
            resConfigs "en"
        }
        // resConfigs "en", "xxxhdpi" // DEBUG xxxhdpi = Pixel 2 XL
        // resConfigs "fr", "xxhdpi" // DEBUG xxhdpi = Nexus 5
        minSdkVersion libs.versions.minSdkVersion.get().toInteger()
        buildConfigField "int", "MIN_SDK_VERSION", "$minSdkVersion.apiLevel"
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()

        manifestPlaceholders = [
                permission_provider_read     : "org.mtransit.android.provider.permission.READ_PROVIDER",
                permission_receiver_broadcast: "org.mtransit.android.receiver.permission.BROADCAST_RECEIVER",
                target_sdk_version           : libs.versions.targetSdkVersion.get(),
                pkg_namespace                : namespace,
        ]

        javaCompileOptions {
            annotationProcessorOptions {
                if (isMainApp) {
                    arguments += [
                            "room.schemaLocation": "$projectDir/schemas".toString(),
                            "room.incremental"   : "true",
                    ]
                }
            }
        }
    }

    signingConfigs {
        debug {
            if (debugSigningKeysPropertiesFile.exists()) {
                storeFile file(debugSigningKeysProperties['key.store'])
                storePassword debugSigningKeysProperties['key.store.password']
                keyAlias debugSigningKeysProperties['key.alias']
                keyPassword debugSigningKeysProperties['key.alias.password']
            }
        }
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    storeFile file(googlePlayUploadKeysProperties['key.store'])
                    storePassword googlePlayUploadKeysProperties['key.store.password']
                    keyAlias googlePlayUploadKeysProperties['key.alias']
                    keyPassword googlePlayUploadKeysProperties['key.alias.password']
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    storeFile file(appSigningKeysProperties['key.store'])
                    storePassword appSigningKeysProperties['key.store.password']
                    keyAlias appSigningKeysProperties['key.alias']
                    keyPassword appSigningKeysProperties['key.alias.password']
                }
            }
        }
    }

    buildFeatures {
        aidl false
        buildConfig true
        compose false
        dataBinding false
        renderScript false
        resValues true
        shaders false
        if (isMainApp) {
            viewBinding true
        } else {
            viewBinding false
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "_DEBUG"
            applicationIdSuffix ".debug"
            manifestPlaceholders = [
                    permission_provider_read     : "org.mtransit.android.debug.provider.permission.READ_PROVIDER",
                    permission_receiver_broadcast: "org.mtransit.android.debug.receiver.permission.BROADCAST_RECEIVER",
            ]

            // testCoverageEnabled false // DEBUG skip coverage report
            shrinkResources false
            if (isMainApp) {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'),
                        'proguard-rules.pro'
                multiDexEnabled true
                firebaseCrashlytics {
                    // https://firebase.google.com/docs/crashlytics/get-deobfuscated-reports?platform=android#keep_obfuscated_build_variants
                    mappingFileUploadEnabled false
                }
            } else {
                minifyEnabled false
            }
            aaptOptions.cruncherEnabled = false
        }
        release {
            if (useGooglePlayUploadKeysProperties) {
                if (googlePlayUploadKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            } else {
                if (appSigningKeysPropertiesFile.exists()) {
                    signingConfig signingConfigs.release
                }
            }

            if (isMainApp) {
                shrinkResources true
                minifyEnabled true
                // https://android.googlesource.com/platform/sdk/+/master/files/proguard-android-optimize.txt
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), // 'proguard-android.txt'),
                        'proguard-rules.pro'
            } else {
                shrinkResources false
                minifyEnabled false
            }
        }
    }

    lint {
        if (isMainApp) {
            abortOnError true
            warningsAsErrors false
            ignoreWarnings false
            quiet false
        } else {
            abortOnError false
        }
        checkDependencies true // also check leaf modules
        // checkAllWarnings true // too slow for CI, can be enabled locally
        ignoreTestSources true
        if (isMainApp) {
            warning 'InvalidPackage', //
                    'ClickableViewAccessibility', //
                    'MergeRootFrame', //
                    'Overdraw', //
                    'UselessParent', //
                    'IconDensities'  //
            error 'NonConstantResourceId'
        }
    }

    sourceSets {
        main {
            if (isMainApp) {
                // NOTHING
            } else {
                res.srcDirs += 'src/main/res-current'
                res.srcDirs += 'src/main/res-next'
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
                testLogging {
                    events 'passed', 'skipped', 'failed'
                }
            }
        }
    }
}

if (isMainApp) {
    hilt {
        enableAggregatingTask = true
    }
}

dependencies {
    if (isMainApp) {
        implementation(project(':commons-android')) {
            exclude group: 'com.google.protobuf', module: 'protoc'
            exclude group: 'com.google.protobuf', module: 'protobuf-java'
            exclude group: 'com.google.protobuf', module: 'protobuf-javalite'
        }
        implementation libs.bundles.kotlin
        implementation libs.bundles.kotlin.android
        implementation libs.bundles.dagger
        kapt libs.hilt.compiler
        implementation libs.bundles.androidx
        implementation libs.material
        kapt libs.androidx.lifecycle.compiler
        kapt libs.androidx.room.compiler
        implementation libs.bundles.img
        kapt libs.glide.compiler
        implementation platform(libs.firebase.bom)
        implementation libs.bundles.gps
        implementation libs.bundles.billingClient
        implementation libs.bundles.fb
        implementation libs.bundles.appLovin

        if (!isDevLeakCanaryOff) {
            debugImplementation libs.leakcanary
        }

        testImplementation libs.bundles.JUnit
        testImplementation libs.bundles.mockito
    } else {
        implementation project(':commons-android')
        implementation libs.bundles.kotlin
        implementation libs.bundles.kotlin.android
        implementation libs.core
    }
}

kapt {
    correctErrorTypes true // allow references to generated code
}

play {
    serviceAccountCredentials.set(file("google-play-auto-publisher.json"))
    defaultToAppBundles.set(true)
    // Available tracks: internal, alpha, Beta (Private), beta, production
    // "Beta (Private)" is default because it's hard to use with -Pparam parameter
    track.set("Beta (Private)")
    fromTrack.set("Beta (Private)")
    promoteTrack.set("Beta (Private)")
    releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT) // ReleaseStatus.[COMPLETED/DRAFT/HALTED/IN_PROGRESS]
    userFraction.set(0.01d) // 0.00 - 0.10 - 0.33 - 0.50 - 1.00 WHEN releaseStatus=[inProgress/halted]
    updatePriority.set(4) // 0-5, 0=default, 5=highest priority
}
